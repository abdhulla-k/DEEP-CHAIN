# In: app/schemas/document_schemas.py

from typing import List, Optional, Dict, Any
from pydantic import BaseModel, Field

class ScrapedPage(BaseModel):
    """Represents content scraped from a single URL."""
    url: str
    content: str
    title: Optional[str] = None
    error: Optional[str] = None

class ResearchState(BaseModel):
    """
    The central state object for the multi-agent document generation graph.
    It's passed between nodes and updated by them.
    """

    # Inputs from User
    initial_topic: str = Field(description="The original topic provided by the user.")
    reference_urls: List[str] = Field(
        default_factory=list,
        description="Specific URLs provided by the user for direct scraping and reference."
    )

    # Planning & Iteration Control
    research_plan: Optional[List[str]] = Field(
        None,
        description="An optional list of sub-topics or key areas to research, possibly generated by a planner agent."
    )
    current_research_focus: Optional[str] = Field(
        None,
        description="The current sub-topic or refined question being actively researched in an iteration."
    )
    search_queries_history: List[Dict[str, Any]] = Field(
        default_factory=list,
        description="History of all search queries used and their raw results. E.g. [{'query': '...', 'results': [...]}]"
    )
    iteration_count: int = Field(
        0,
        description="Counter for research/critique cycles to prevent infinite loops."
    )
    max_iterations: int = Field(
        5,
        description="Maximum number of research-critique iterations allowed."
    )

    # Data Collection
    generated_search_queries: List[str] = Field(
        default_factory=list,
        description="Search queries generated by an LLM for the current research focus."
    )
    # Storing raw search results directly. Each item in the list could be a dict from a search tool.
    # Example: [{'title': '...', 'link': '...', 'snippet': '...'}]
    raw_search_results: List[Dict[str, Any]] = Field(
        default_factory=list,
        description="Raw search engine results collected for the current queries."
    )
    scraped_content_from_references: List[ScrapedPage] = Field(
        default_factory=list,
        description="Content scraped from user-provided reference_urls."
    )
    scraped_content_from_search: List[ScrapedPage] = Field(
        default_factory=list,
        description="Content scraped from relevant URLs found during web search."
    )
    extracted_text_from_references: List[Dict[str, str]] = Field(
        default_factory=list,
        description="List of {'url': url, 'extracted_text': text} from reference URLs after processing."
    )
    
    # Information Processing & Critique
    consolidated_information: Optional[str] = Field(
        None,
        description="A temporary compilation or summary of all gathered information before critique, or refined info after critique."
    )
    critique_feedback: Optional[str] = Field(
        None,
        description="Feedback from a critique agent on the gathered information (e.g., gaps, inaccuracies, suggestions)."
    )
    is_information_sufficient: bool = Field(
        False,
        description="Flag set by the critique agent indicating if the current information is sufficient to proceed with writing."
    )
    gaps_identified: List[str] = Field(
        default_factory=list,
        description="Specific gaps or areas needing more research, as identified by the critique agent."
    )

    # Output
    draft_document: Optional[str] = Field(
        None,
        description="The drafted document content generated by a writer agent."
    )
    final_document: Optional[str] = Field(
        None,
        description="The final, reviewed, and possibly validated document."
    )
    citations: List[Dict[str, str]] = Field(
        default_factory=list,
        description="List of sources used, e.g., {'text_snippet': '...', 'source_url': '...'}"
    )

    # Operational / Meta
    error_message: Optional[str] = Field(
        None,
        description="Stores any critical error message encountered during the process."
    )
    status_message: str = Field(
        "Initializing document generation process...",
        description="A human-readable status message indicating the current stage of the process."
    )

    class Config:
        """Pydantic model configuration."""
        validate_assignment = True 