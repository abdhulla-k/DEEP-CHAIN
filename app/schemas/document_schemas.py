from typing import List, Optional, Dict, Any # Dict and Any for rich search results
from pydantic import BaseModel, Field

class ScrapedPage(BaseModel):
    url: str
    content: str
    title: Optional[str] = None
    error: Optional[str] = None

class ResearchState(BaseModel):
    # Inputs
    initial_topic: str = Field(description="The original topic provided by the user.")
    reference_urls: List[str] = Field(default_factory=list, description="URLs provided by the user for reference.")

    # Planning & Iteration
    current_research_focus: Optional[str] = Field(None, description="Current sub-topic or question being researched.")
    research_plan: Optional[List[str]] = Field(None, description="Overall plan or list of sub-topics to cover.")
    search_queries_history: List[str] = Field(default_factory=list, description="History of search queries used.")
    iteration_count: int = Field(0, description="How many research cycles have been performed.")
    max_iterations: int = Field(5, description="Maximum research iterations to prevent infinite loops.")

    # Data Collection
    generated_search_queries: List[str] = Field(default_factory=list, description="Queries generated by the LLM for the current focus.")
    search_results: List[Dict[str, Any]] = Field(default_factory=list, description="Aggregated search engine results from various queries.")
    scraped_content: List[ScrapedPage] = Field(default_factory=list, description="Content scraped from reference URLs or relevant search results.")
    
    # Consolidated Information (raw material before critique)
    consolidated_information: Optional[str] = Field(None, description="A summary or compilation of all gathered info before critique.")

    # Critique & Validation
    critique_feedback: Optional[str] = Field(None, description="Feedback from the critique agent on the gathered information.")
    is_information_sufficient: bool = Field(False, description="Flag indicating if the current information is deemed sufficient by the critique agent.")
    gaps_identified: List[str] = Field(default_factory=list, description="Specific gaps or areas needing more research identified by critique.")

    # Output
    draft_document: Optional[str] = Field(None, description="The drafted document content.")
    final_document: Optional[str] = Field(None, description="The final, verified document.")
    citations: List[Dict[str, str]] = Field(default_factory=list, description="List of sources used, e.g., {'text_snippet': '...', 'source_url': '...'}")

    # Error Handling
    error_message: Optional[str] = Field(None, description="Any critical error message encountered during the process.")
    status_message: str = Field("Initializing...", description="Current status of the generation process.")

    class Config:
        validate_assignment = True # Ensures type checks on attribute assignment